Metadata-Version: 2.1
Name: openpivgui
Version: 0.1.10
Summary: A simple GUI for Open PIV.
Home-page: https://github.com/OpenPIV/openpiv_tk_gui
Author: Peter Vennemann
Author-email: vennemann@fh-muenster.de
License: UNKNOWN
Description: # Simple GUI for Open PIV
        
        This graphical user interface provides an efficient workflow for evaluating and postprocessing particle image velocimetry (PIV) images. OpenPivGui relies on the Python libraries provided by the [OpenPIV project](http://www.openpiv.net/).
        
        ![Screen shot of the GUI showing a vector plot.](https://raw.githubusercontent.com/OpenPIV/openpiv_tk_gui/master/fig/open_piv_gui_vector_plot.png)
        
        ## Installation
        
        You may use Pip to install `OpenPivGui`:
        
        ```
        pip3 install openpivgui
        ```
        
        ## Launching
        
        Launch `OpenPivGui` by executing:
        
        ```
        python3 -m openpivgui.OpenPivGui
        ```
        
        ## Using and Adapting the GUI
        
        Watch a ten minute video to learn how to use and extend OpenPivGui:
        
        https://video.fh-muenster.de/Panopto/Pages/Viewer.aspx?id=309dccc2-af58-44e0-8cd3-ab9500c5b7f4
        
        ### Usage
        
        1. Press »select files for processing« and choose some images. Use Ctrl + Shift for selecting mutliple files.
        2. To inspect the images, click on the links in the file-list on the right side of the OpenPivGui window.
        3. Walk through the tabs, select the desired functions, and edit the corresponding parameters.
        4. Press »start processing chain« to start the evaluation.
        5. Inspect the results by clicking on the links in the file-list.
        6. Use the »back« and »forward« buttons to inspect intermediate results. Use the »back« and »forward« buttons also to list the image files again, and to repeat the evaluation.
        4. Use »dump settings« to document your project. You can recall the settings anytime by pressing »load settings«. The lab-book entries are also restored from the settings file.
        
        ### Adaption
        
        First, get the source code. There are two possibilities:
        
        1. Clone the git repository:
        
        ```
        git clone https://github.com/OpenPIV/openpiv_tk_gui.git
        ```
        
        2. Find out, where pip3 placed the source scripts and edit them in place:
        
        ```
        pip3 show openpivgui
        ```
        
        In both cases, cd into the subdirectory `openpivgui` and find the main scripts to edit:
        
        - `OpenPivParams.py`
        - `OpenPivGui.py`
        
        Usually, there are two things to do:
        
        1. Adding new variables and a corresponding widgets to enable users to modify its values.
        2. Adding a new method (function).
        
        #### Adding new variables
        
        Open the script `OpenPivParams.py`. Find the method `__init__()`. There, you find a variable, called `default` of type dict. All widgets like checkboxes, text entries, and option menues are created based on the content of this dictionary. 
        
        By adding a dictionary element, you add a variable. A corresponding widget is automatically created. Example:
        
        ```
        'corr_window':             # key
            [3020,                 # index
             'int',                # type
             32,                   # value
             (8, 16, 32, 64, 128), # hints
             'window size',        # label
             'Size in pixel.'],    # help
        ```
        
        In `OpenPivGui.py`, you access the value of this variable via `p['corr_window']`. Here, `p` is the instance name of an `OpenPivParams` object. Typing
        
        ```
        print(p['corr_window'])
        ```
        
        will thus result in:
        
        ```
        32
        ```
        
        The other fields are used for widget creation:
        
        - index: An index of 3xxx will place the widget on the third rider (»PIV«).
        - type:
            + `None`: Creates a new notebook rider.
        	+ `bool`: A checkbox will be created.
        	+ `str[]`: Creates a listbox.
        	+ `text`: Provides a text area.
        	+ `float`, `int`, `str`: An entry widget will be created.
        - hints: If hints is not `None`, an option menu is provided with `hints` (tuple) as options.
        - label: The label next to the manipulation widget.
        - help: The content of this field will pop up as a tooltip, when the mouse is moved over the widget.
        
        #### Adding a new method
        
        Open the script `OpenPivGui`. There are two main possibilities, of doing something with the newly created variables:
        
        1. Extend the existing processing chain.
        
        2. Create a new method.
        
        ##### Extend existing processing chain
        
        Find the function definition `start_processing()`. Add another `if` statement and some useful code.
        
        ##### Create a new method
        
        Find the function definition `__init_buttons()`. Add something like:
        
        ```
        ttk.Button(f,
                   text='button label',
                   command=self.new_func).pack(fill='x')
        ```
        
        Add the new function:
        
        ```
        def new_func(self):
            # do something useful here
            pass
        ```
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: OS Independent
Requires-Python: >=3.0
Description-Content-Type: text/markdown
