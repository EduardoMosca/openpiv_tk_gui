<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Contribution</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="contribution">
<h1>Contribution</h1>
<p>Contributions are very welcome! Please have the design considerations in mind and follow the step by step guides below.</p>
<div class="section" id="design-considerations">
<h2>Design Considerations</h2>
<ul class="simple">
<li><p>The order of parameters and parameter riders in the GUI should represent the flow of data processing (figure).</p></li>
</ul>
<div class="figure align-default" id="id2" style="width: 100%">
<img alt="Data processing flow diagram." src="_images/data_flow.svg" /><p class="caption"><span class="caption-text">OpenPivGui data processing flow diagram.</span></p>
</div>
<ul class="simple">
<li><p>OpenPivGui ist designed for providing a very fast workflow. Don’t interrupt this workflow by asking for individual user input, as far as possible. Rather use parameters or algorithms.</p></li>
<li><p>Separate the user interface code from the working code. An OpenPivParams object can be created and used independently from the GUI. Also the vec_plot module or the MultiProcessing class can be called from the command line from another program or Jupyter notebook, independently from the GUI.</p></li>
<li><p>The code is designed for developing it together with PIV-experimentalists rather than programmers. Therefore, keep the code as clear and concise as possible, also by resigning from too many user-friendly gimmicks.</p></li>
<li><p>Write your docstrigs in the <a class="reference external" href="https://numpydoc.readthedocs.io/en/latest/format.html">Numpy/Scipy style</a><span class="link-target"> [https://numpydoc.readthedocs.io/en/latest/format.html]</span>.</p></li>
</ul>
</div>
<div class="section" id="without-write-access">
<h2>Without Write Access</h2>
<p>This is the standard procedure of contributing to OpenPivGui.</p>
<ol class="arabic">
<li><p>If not done, install Git (platform dependend) and configure it on the command line:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="s2">&quot;first name surname&quot;</span>
<span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="s2">&quot;e-mail address&quot;</span>
</pre></div>
</div>
</li>
<li><p>Create a Github account, navigate to the <a class="reference external" href="https://github.com/OpenPIV/openpiv_tk_gui">OpenPivGui Github page</a><span class="link-target"> [https://github.com/OpenPIV/openpiv_tk_gui]</span> and press the fork button (top right of the page). Github will create a personal online fork of the repository for you.</p></li>
<li><p>Clone your fork, to get a local copy:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">your_user_name</span><span class="o">/</span><span class="n">openpiv_tk_gui</span><span class="o">.</span><span class="n">git</span>
</pre></div>
</div>
</li>
<li><p>Your fork is independent from the original (upstream) repository. To be able to sync changes in the upstream repository with your fork later, specify the upstream repository:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cd</span> <span class="n">openpiv_tk_gui</span>
<span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">upstream</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">OpenPIV</span><span class="o">/</span><span class="n">openpiv_tk_gui</span><span class="o">.</span><span class="n">git</span>
<span class="n">git</span> <span class="n">remote</span> <span class="o">-</span><span class="n">v</span>
</pre></div>
</div>
</li>
<li><p>Change the code locally, commit the changes:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;A meaningful comment on the changes.&#39;</span>
</pre></div>
</div>
</li>
<li><p>See, if there are updates in the upstream repository and save them in your local branch upstream/master::</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">fetch</span> <span class="n">upstream</span>
</pre></div>
</div>
</li>
<li><p>Merge possible upstream changes into your local master branch:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">merge</span> <span class="n">upstream</span><span class="o">/</span><span class="n">master</span>
</pre></div>
</div>
</li>
<li><p>If there are merge conflicts, use <code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">status</span></code> and <code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">diff</span></code> for displaying them. Git marks conflicts in your files, <a class="reference external" href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line">as described in the Github documentation on solving merge conflicts</a><span class="link-target"> [https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line]</span>. After resolving merge conflicts, upload everything:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;A meaningful comment.&#39;</span>
<span class="n">git</span> <span class="n">push</span>
</pre></div>
</div>
</li>
<li><p>Propose your changes to the upstream developer by creating a pull-request, as described <a class="reference external" href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork">in the Github documentation for creating a pull-request from a fork</a><span class="link-target"> [https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork]</span>. (Basically just pressing the »New pull request« button.)</p></li>
</ol>
<p>Good luck!</p>
</div>
<div class="section" id="with-write-access">
<h2>With Write Access</h2>
<ol class="arabic">
<li><p>If not done, install Git and configure it:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="s2">&quot;first name surname&quot;</span>
<span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="s2">&quot;e-mail address&quot;</span>
</pre></div>
</div>
</li>
<li><p>Clone the git repository:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">OpenPIV</span><span class="o">/</span><span class="n">openpiv_tk_gui</span><span class="o">.</span><span class="n">git</span>
</pre></div>
</div>
</li>
<li><p>Create a new branch and switch over to it:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cd</span> <span class="n">openpiv_tk_gui</span>
<span class="n">git</span> <span class="n">branch</span> <span class="n">meaningful</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="n">meaningful</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span>
<span class="n">git</span> <span class="n">status</span>
</pre></div>
</div>
</li>
<li><p>Change the code locally and commit changes:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;A meaningful comment on the changes.&#39;</span>
</pre></div>
</div>
</li>
<li><p>Push branch, so everyone can see it:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="nb">set</span><span class="o">-</span><span class="n">upstream</span> <span class="n">origin</span> <span class="n">meaningful</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span>
</pre></div>
</div>
</li>
<li><p>Create a pull request. This is not a Git, but a Github feature, so you must use the Github user-interface, as described in the <a class="reference external" href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request#creating-the-pull-request">Github documentaton on creating a pull request from a branch</a><span class="link-target"> [https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request#creating-the-pull-request]</span>.</p></li>
<li><p>After discussing the changes and possibly additional commits, the feature-branch can be merged into the main branch:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
<span class="n">git</span> <span class="n">merge</span> <span class="n">meaningful</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span>
</pre></div>
</div>
</li>
<li><p>Eventually, solve merge conflicts. Use <code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">status</span></code> and <code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">diff</span></code> for displaying conflicts. Git marks conflicts in your files, <a class="reference external" href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line">as described in the Github documentation on solving merge conflicts</a><span class="link-target"> [https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line]</span>.</p></li>
<li><p>Finally, the feature-branch can safely be removed:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">meaningful</span><span class="o">-</span><span class="n">branch</span><span class="o">-</span><span class="n">name</span>
</pre></div>
</div>
</li>
<li><p>Go to the Github user-interface and also delete the now obsolete online copy of the feature-branch.</p></li>
</ol>
<p>Good luck!</p>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>